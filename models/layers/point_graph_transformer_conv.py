import math
from typing import Dict, List, Optional, Union

import torch
import torch.nn.functional as F
from torch import Tensor
from torch.nn import Parameter
from torch_sparse import SparseTensor
from torch import nn

from torch_geometric.nn.conv import MessagePassing
from torch_geometric.nn.dense import Linear
from torch_geometric.nn.inits import glorot, ones, reset
from torch_geometric.nn.module_dict import ModuleDict
from torch_geometric.nn.parameter_dict import ParameterDict
from torch_geometric.typing import EdgeType, Metadata, NodeType
from torch_geometric.utils import softmax, scatter


def group(xs: List[Tensor], aggr: Optional[str]) -> Optional[Tensor]:
    if len(xs) == 0:
        return None
    elif aggr is None:
        return torch.stack(xs, dim=1)
    elif len(xs) == 1:
        return xs[0]
    else:
        out = torch.stack(xs, dim=0)
        out = getattr(torch, aggr)(out, dim=0)
        out = out[0] if isinstance(out, tuple) else out
        return out


class PGHTConv(MessagePassing):
    r"""The Heterogeneous Graph Transformer (HGT) operator from the
    `"Heterogeneous Graph Transformer" <https://arxiv.org/abs/2003.01332>`_
    paper.

    .. note::

        For an example of using HGT, see `examples/hetero/hgt_dblp.py
        <https://github.com/pyg-team/pytorch_geometric/blob/master/examples/
        hetero/hgt_dblp.py>`_.

    Args:
        in_channels (int or Dict[str, int]): Size of each input sample of every
            node type, or :obj:`-1` to derive the size from the first input(s)
            to the forward method.
        out_channels (int): Size of each output sample.
        metadata (Tuple[List[str], List[Tuple[str, str, str]]]): The metadata
            of the heterogeneous graph, *i.e.* its node and edge types given
            by a list of strings and a list of string triplets, respectively.
            See :meth:`torch_geometric.data.HeteroData.metadata` for more
            information.
        group (string, optional): The aggregation scheme to use for grouping
            node embeddings generated by different relations.
            (:obj:`"sum"`, :obj:`"mean"`, :obj:`"min"`, :obj:`"max"`).
            (default: :obj:`"sum"`)
        **kwargs (optional): Additional arguments of
            :class:`torch_geometric.nn.conv.MessagePassing`.
    """
    def __init__(
        self,
        in_channels: Union[int, Dict[str, int]],
        edge_in_channels: Union[int, Dict[str, int]],
        out_channels: int,
        metadata: Metadata = None,
        group: str = "sum",
        num_attn_groups: int = 2,
        dropout = 0.1,
        **kwargs,
    ):
        super().__init__(aggr='add', node_dim=0, **kwargs)

        assert out_channels % num_attn_groups == 0 , 'out_channels must be divisible by num_attn_groups'
        metadata = [('node',),(('node', 'edge', 'node'),)] 
        # if not isinstance(in_channels, dict):
        #     in_channels = {node_type: in_channels for node_type in metadata[0]}

        # if not isinstance(edge_in_channels, dict):
        #     edge_in_channels = {edge_type: edge_in_channels for edge_type in metadata[1]}

        self.in_channels = in_channels
        self.edge_in_channels = edge_in_channels
        self.out_channels = out_channels
        self.group = group
        self.num_attn_groups = num_attn_groups
        full_edge_in_ch = in_channels*2 + edge_in_channels
        self.k_lin = nn.Sequential(nn.Linear(full_edge_in_ch, out_channels),nn.BatchNorm1d(out_channels,affine=False), nn.ReLU())
        self.q_lin = nn.Sequential(nn.Linear(full_edge_in_ch, out_channels),nn.BatchNorm1d(out_channels,affine=False), nn.ReLU())
        self.v_lin = Linear(full_edge_in_ch, out_channels)
        self.out_lin = Linear(out_channels, out_channels)
        self.identity_lin = Linear(in_channels, out_channels) if in_channels != out_channels else None
        self.norm_input = nn.BatchNorm1d(in_channels)
        self.norm_output = nn.BatchNorm1d(out_channels)

        self.edge_lin = nn.Sequential(nn.Linear(in_channels, out_channels),nn.BatchNorm1d(out_channels), nn.ReLU(), nn.Linear(out_channels, out_channels))

        self.coords_bias_nn = nn.Sequential(nn.Linear(3, out_channels),nn.BatchNorm1d(out_channels), nn.ReLU(), nn.Linear(out_channels, out_channels))
        self.coords_mul_nn = nn.Sequential(nn.Linear(3, out_channels),nn.BatchNorm1d(out_channels), nn.ReLU(),nn.Linear(out_channels, out_channels))

        self.attn_nn = nn.Sequential(nn.Linear(out_channels, num_attn_groups),nn.BatchNorm1d(num_attn_groups), nn.ReLU(),nn.Linear(num_attn_groups, num_attn_groups))
        self.norm_messages = nn.BatchNorm1d(out_channels)
        self.reset_parameters()
        self.attn_drop = nn.Dropout(dropout)
        
        self.act = nn.Sigmoid()
        
            
    # nn.Sequential(nn.Linear(cross_distance_embed_dim, emb_dim), nn.ReLU(), nn.Dropout(dropout),nn.Linear(emb_dim, emb_dim))
    def reset_parameters(self):
        reset(self.k_lin)
        reset(self.q_lin)
        reset(self.v_lin)
        reset(self.out_lin)
        reset(self.edge_lin) if self.edge_lin else None
        reset(self.coords_bias_nn)
        reset(self.coords_mul_nn)
        reset(self.attn_nn) if not self.attn_nn else None 

    def forward(
        self,
        node_attr: Tensor,
        edge_index: Union[Tensor,SparseTensor],
        edge_attr: Tensor,
        coords: Tensor,
    ) -> Tensor:
        r"""
        Args:
            x_dict (Dict[str, Tensor]): A dictionary holding input node
                features  for each individual node type.
            edge_index_dict (Dict[str, Union[Tensor, SparseTensor]]): A
                dictionary holding graph connectivity information for each
                individual edge type, either as a :obj:`torch.LongTensor` of
                shape :obj:`[2, num_edges]` or a
                :obj:`torch_sparse.SparseTensor`.

        :rtype: :obj:`Dict[str, Optional[Tensor]]` - The output node embeddings
            for each node type.
            In case a node type does not receive any message, its output will
            be set to :obj:`None`.
        """

        node_attr = self.norm_input(node_attr)
        # k = self.k_lin['node'](x)
        # q = self.q_lin['node'](x)
        # v = self.v_lin['node'](x)
        # propagate_type: (v: Tensor, coords: Tensor, e: Tensor)
        out = self.propagate(
                edge_index,
                size=None,
                v=node_attr,
                coords=coords,
                e=edge_attr,
            )


        out = self.out_lin(F.relu(out))
        out = self.norm_output(out)
        identity = node_attr
        if out.size(-1) != identity.size(-1):
            identity = self.identity_lin(identity)
        # alpha = self.skip[node_type].sigmoid()
        out = out + identity

        return out

    def message(self, 
                v_i: Tensor,v_j: Tensor,
                e: Tensor, coords_i: Tensor,coords_j: Tensor,
                index: Tensor, ptr: Optional[Tensor],
                size_i: Optional[int]) -> Tensor:
        v_i_e_v_j = torch.concat([v_i, e, v_j],dim=-1) # maybe through coords here?
        # dists = (coords_i - coords_j).norm()
        k = self.k_lin(v_i_e_v_j)
        q = self.q_lin(v_i_e_v_j)
        v = self.v_lin(v_i_e_v_j)
        
        weighted_v = self.act(q - k) * v
        # res = scatter(weighted_v, index, reduce="mean")
        return weighted_v

    def __repr__(self) -> str:
        return (f'{self.__class__.__name__}(-1, {self.out_channels})')

    def __repr__(self) -> str:
        return (f'{self.__class__.__name__}(-1, {self.out_channels})')
